/**
 * `grunt test`      -     run tests
 * `grunt lint`      -     lint front and backend
 * `grunt docs`      -     create docs
 * `grunt validate`  -     check everything is how it should be before making a pull request a main branch
 */

module.exports = function(grunt) {

    'use strict';

    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),

            /**
         * Linting & code sanity
         */
		jshint: {
			browserify: {
	            options: {
					browser : true,     // browser variables
                    node : true,        // node variables
	                curly: true,        // disallow functions without curly braces
	                eqeqeq: true,       // === and  !== instead of == and !=
	                strict: true,       // have to enable strict mode
	                undef: true,        // disallow globally defined variables
	                noarg: true,        // prevents depreciated javascript functions
	                loopfunc: true,     // disallow functions inside loops
	                immed: true,        // disallow immediate functions, they need ()
	                indent: 4,          // force tab indentation to be set to 4
	                quotmark: 'single', // force use of single quotation marks
	                camelcase: true,    // forces camel case - note this needs to be ignored when using json apis
	                unused: true,       // disallows unused variables
	                eqnull: true,       // allow variable comparison with null or undefined
	                laxcomma: true,     // allow commas before variables or keys
	                globals: {
					},
	                reporter: require('jshint-stylish')
	            },
				src: ['lib/static/dev/**/*.js', 'lib/utility/*.js']
			},
			node: {
				options: {
					node : true,        // node variables
					curly: true,        // disallow functions without curly braces
					eqeqeq: true,       // === and  !== instead of == and !=
					strict: true,       // have to enable strict mode
					undef: true,        // disallow globally defined variables
					noarg: true,        // prevents depreciated javascript functions
					loopfunc: true,     // disallow functions inside loops
					immed: true,        // disallow immediate functions, they need ()
					indent: 4,          // force tab indentation to be set to 4
					quotmark: 'single', // force use of single quotation marks
					camelcase: true,    // forces camel case - note this needs to be ignored when using json apis
					unused: true,       // disallows unused variables
					eqnull: true,       // allow variable comparison with null or undefined
					laxcomma: true,     // allow commas before variables or keys
					globals: {
						define: true,
						require: true
					},
					reporter: require('jshint-stylish')
				},
				src: ['index.js', 'lib/upper.js'],
			},
			'browser-test': {
				options: {
					browser : true,     // browser variables
					curly: true,        // disallow functions without curly braces
					eqeqeq: true,       // === and  !== instead of == and !=
					strict: true,       // have to enable strict mode
					undef: true,        // disallow globally defined variables
					noarg: true,        // prevents depreciated javascript functions
					loopfunc: true,     // disallow functions inside loops
					immed: true,        // disallow immediate functions, they need ()
					indent: 4,          // force tab indentation to be set to 4
					quotmark: 'single', // force use of single quotation marks
					camelcase: true,    // forces camel case - note this needs to be ignored when using json apis
					unused: true,       // disallows unused variables
					eqnull: true,       // allow variable comparison with null or undefined
					laxcomma: true,     // allow commas before variables or keys
					'-W068': true,	 	// allow `unnecessary` wrapping functions
					'-W100': true,		// allow unsafe characters
					globals: {
						console: true,
						describe: true,
						it: true,
						beforeEach: true,
						before: true,
						define: true,
						require: true,
						module: true,
						requirejs: true
					},
					reporter: require('jshint-stylish')
				},
				src: ['test/client/specs/**/*Spec.js'],
			},
			'node-test': {
				options: {
					node : true,        // node variables
					curly: true,        // disallow functions without curly braces
					eqeqeq: true,       // === and  !== instead of == and !=
					strict: true,       // have to enable strict mode
					undef: true,        // disallow globally defined variables
					noarg: true,        // prevents depreciated javascript functions
					loopfunc: true,     // disallow functions inside loops
					immed: true,        // disallow immediate functions, they need ()
					indent: 4,          // force tab indentation to be set to 4
					quotmark: 'single', // force use of single quotation marks
					camelcase: true,    // forces camel case - note this needs to be ignored when using json apis
					unused: true,       // disallows unused variables
					eqnull: true,       // allow variable comparison with null or undefined
					laxcomma: true,     // allow commas before variables or keys
					'-W068': true,		// allow `unnecessary` wrapping functions
					globals: {
						describe: true,
						it: true,
						beforeEach: true,
                        afterEach: true,
						before: true,
                        after: true
					},
					reporter: require('jshint-stylish')
				},
				src: ['test/server/**/**/*Spec.js', 'test/e2e/**/**/*Spec.js'],
			}
		},
        shell: {
            express: {
                options: {
                    port: 9000
                },
                command: 'node test/resources/server.js'
            },
            e2e: {
                command: 'node test/e2e/run.js'
            }
        },

        // server tests
        mochaTest: {
            lib: {
                options: {
                    reporter: 'spec',
                    growl: true,
                    colors: true
                },
                src: ['test/server/**/**/*Spec.js', 'test/common.js']
            }
        },

        // frontent tests
    	karma: {
			wercker: {
				configFile: 'test/client/karma.conf.js',
                singleRun: true,
				browsers: ['PhantomJS']
			},
			'user-osx': {
				configFile: 'test/client/karma.conf.js',
				singleRun: true,
				logLevel: 'ERROR',

				// test on all browsers avaliable for osx
				browsers: ['Chrome', 'PhantomJS', 'Firefox', 'Safari'],
			},
			'user-win': {
				configFile: 'test/client/karma.conf.js',
				singleRun: true,
				logLevel: 'ERROR',

				// test on all browsers avaliable for windows
				browsers: ['Chrome', 'PhantomJS', 'Firefox', 'IE'],
			},
			'user-linux': {
				configFile: 'test/client/karma.conf.js',
				singleRun: true,
				logLevel: 'ERROR',

				// test on all browsers avaliable for linux
				browsers: ['Chrome', 'PhantomJS', 'Firefox', 'Opera'],
			}
		}
    });

	// Run specific tests depending on OS
	if (process.platform === 'win32') {
		// windows
		grunt.registerTask('test:frontend', ['karma:user-win']);
	} else if(process.platform === 'darwin') {
		// os
		grunt.registerTask('test:frontend', ['karma:user-osx']);
	} else {
		// linux
		grunt.registerTask('test:frontend', ['karma:user-linux']);
	}

    // npm modules
    grunt.loadNpmTasks('grunt-contrib-jshint');
    grunt.loadNpmTasks('grunt-mocha-test');
    grunt.loadNpmTasks('grunt-shell');
    grunt.loadNpmTasks('grunt-karma');

    // tasks
    grunt.registerTask('lint', ['jshint']);
    grunt.registerTask('test:e2e', ['shell:e2e']);
    grunt.registerTask('test:backend', ['mochaTest']);

    grunt.registerTask('test', ['test:backend', 'test:e2e', 'test:frontend']);
    grunt.registerTask('example', ['shell:express']);
    grunt.registerTask('default', ['test', 'lint']);

    // to be run by wercker for testing --- 'karma:wercker' needs to be added when passing
    grunt.registerTask('test:wercker', ['test:backend']);
};
