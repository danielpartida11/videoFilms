'use strict';

var Uploader, self;

/**
 * @class Uploader
 * @desc Interface for uploading files using event emitter
 */
module.exports = Uploader = function (config) {
    self = this;

    self.config = config || {};
    self.meta = self.config.meta;
    self.element = config.element;

    self.transfer = new (require('./transfer'))(config, self);

    /*!
     * Listen to input for change
     */
    self.element.addEventListener('change', function () {

        var reader = new window.FileReader(),
            file = self.element.files && self.element.files[0];

        reader.readAsDataURL(file);
        reader.onload = function (e) {
            self.emit('preview', e.target.result);
        };

        // Add file to queue to transfer
        if(!self.config.defer) {
            self.transfer.add(file);
        } else {
            self._defferedFile = file;
        }

    }, false);

    return self;
};

/**
 * @inherits EventEmitter
 */
Uploader.prototype = new (require('events').EventEmitter)();

/**
 * @method start
 * @desc Start the upload
 * @note If { defer: true } has not been passed to
 *       config in `.listen(elem, config)`, an error will
 *       be thrown on call.
 * @returns {Boolean} If the upload has started or not. This
 *                    depends on if the file input triggered
 *                    an onchange event.
 */
Uploader.prototype.start = function () {
    if(self.config.defer) {
        // actually upload the file

        if(self._defferedFile) {
            self.transfer.add(self._defferedFile);
            return true;
        } else {
            return false;
        }
    } else {
        throw new Error('Upper.js: Cannot call start() on auto upload');
    }
};
