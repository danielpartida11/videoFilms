'use strict';
/**
 * @class Upper
 * @param {Object} config: Configuration infor, transport is necessary
 * @desc Client side Upper object with AMD compatability
 * @returns self - attacked to window when AMD is not utilized
 */
var Upper = function (config) {

    self = this;

    config = config || {};

    self.isHTTP = config.isHTTP;
    self.path = config.path;
},
    self;

/**
 * @method listen
 * @desc listen to an file input element
 * @args {Object} element, Reference to the file input HTML node
 *       {Object} config, Configuration options (optional)
 */
Upper.prototype.listen = function (element, options) {

    options = options || {};

    // TODO: Make uploader and it's children independant to
    //       `Upper` super class
    var upConfig = options;
    upConfig.element = element;

    upConfig = require('util')._extend(upConfig, self);

    return element ? new (require('./uploader'))(upConfig, self.transfer) : (function () {
        throw new Error('Upper: .listen() method requires an element as argument');
    })();
};
