'use strict';

var Debugger,
    chalk = require('chalk'),
    self;

module.exports = Debugger = function () {
    self = this;

    self.platform = ((typeof(window) !== 'undefined') && window.Array && window.String) ? 'client' : 'server';
    self.profiles = {
        general: {
            color: chalk.inverse
        },
        info: {
            color: chalk.reset
        },
        warning: {
            color: chalk.bold.black
        },
        error: {
            color: chalk.bgRed
        }
    };
};

Debugger.prototype._format = function () {
    var output = '';
    for(var i in arguments) {
        output += (arguments[i].constructor === Object || arguments[i].constructor === Array) ? (JSON.stringify(arguments[i], null, 4) + ' ') : (arguments[i] + ' ');
    }
    return output;
};

Debugger.prototype.log = function () {
    console.log(self._format(arguments));

    return function (profile, message) {
        return profile && message && self._shouldLog(profile) && self.profiles[profile] && typeof(self.profiles[profile].color) === 'function' && process.stdout.write(self.profiles[profile].color(message) + '\n');
    };


};

Debugger.prototype.alert = function () {
    // Only alert if window is avaliable
    return (self.platform === 'client') && window.alert(self._format(arguments));
};
