'use strict';

var Upper,
    fs = require('fs'),
    self;

/**
 * @class Upper
 * @constructor
 * @param {Object} config
 *        {String} server   A node http server
 *        {String} path     Websocket bind path from host
 */
module.exports = Upper = function (config) {

    self = this;

    // file upload status storage
    self.q = {};

    // Bind a node HTTP server to the lib to use the `ws`
    // library with existing frameworks like Expressjs
    self.server = (typeof config.server === 'object' ? function () {

        return (new (require('ws').Server)({
            server: config.server,
            path: config.path || '/upper'
        }))

        .on('connection', function (ws) {

            // messages from client
            ws.onmessage = function (socket) {

                var resp = socket.data;

                try {
                    resp = JSON.parse(resp);

                    // if the file isn't already tracked, track it
                    if(!self.q[resp.id]) {
                        self.q[resp.id] = {
                            name: resp.name,
                            size: resp.size,
                            chunkNum: resp.chunkNum,
                            chunkCount: resp.chunkCount,
                            buffer: '',
                            meta: resp.meta
                        };
                    }

                    var file = self.q[resp.id];

                    /**
                     * @desc information inside `data`
                     *  {
                     *      id: String,
                     *      name: String,
                     *      size: Integer,
                     *      chunkNum: Integer,
                     *      chunkCount: Integer,
                     *      data: String,
                     *      meta: Object
                     *  }
                     */

                    file.buffer += resp.data;
                    file.chunkNum++;

                    if(file.chunkNum === file.chunkCount) {

                        // package up into buffer and return to lib user
                        var buffer = new Buffer(file.buffer, 'binary');

                        self.emit('uploaded', {
                            id: resp.id,
                            data: buffer,
                            name: file.name,
                            size: file.size,
                            meta: resp.meta,
                            utime: new Date()
                        }, function (data) {
                            ws.send(JSON.stringify({
                                done: data,
                                id: resp.id,
                                data: buffer,
                                name: file.name,
                                size: file.size,
                                utime: new Date()
                            }));
                        });

                    } else {

                        // request more chunks
                        ws.send(JSON.stringify({
                            id: resp.id,
                            name: file.name,
                            size: file.size,
                            chunkNum: file.chunkNum,
                            chunkCount: resp.chunkCount
                        }));
                    }

                } catch (err) {
                    ws.send(JSON.stringify({ error: 'Socket message not parseable' }));
                }
            };
        });

    } : function () {
        throw new Error('Upper: A http server object must be passed when constructing');
    })();
};

// Extend EventEmitter to notify the user
Upper.prototype = new (require('events')).EventEmitter();

/**
 * @property client
 * @desc hosts the client side javascript on the express static server
 * @returns clientObj {Object} - ExpressJs compatible middleware
 * @example `app.use(upper.client())`
 */
Upper.prototype.client = function (args) {

    if(args && args.express) {

        return function (req, res, next) {
            // Set content
            res.set('Content-Type', 'text/javascript');

            if(req.path === '/upper.js') {
                res.write(fs.readFileSync(__dirname + '/static/dist/upper.js'));
                res.end();
            } else if (req.path === '/upper.min.js') {
                res.write(fs.readFileSync(__dirname + '/static/dist/upper.min.js'));
                res.end();
            } else if (req.path === '/ng-upper.js' && args && args.angular) {
                res.write(fs.readFileSync(__dirname + '/static/dist/ng-upper.js'));
                res.end();
            } else if (req.path === '/ng-upper.min.js' && args && args.angular) {
                res.write(fs.readFileSync(__dirname + '/static/dist/ng-upper.min.js'));
                res.end();
            } else {
                next();
            }
        };
    } else {
        // Host files using http module using provided server
    }
};
