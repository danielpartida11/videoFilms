define(['chai', 'upper'], function (chai, Upper) {
    'use strict';

    /* jshint newcap: false */

    // enable chai should syntax
    chai.should();

    var lib, uploader;

    before(function () {
        // create a file input
        var input = window.document.createElement('input');
        input.type = 'file';
        input.id = 'fileUpload';
        window.document.querySelectorAll('body')[0].appendChild(input);
    });

    describe('Initialization', function () {

        it('should contruct an new instance of Upper().constructor', function () {
            lib = Upper();
            lib.should.be.an.instanceof(Upper().constructor);
        });
    });

    describe('listen()', function () {

        before(function () {
            // create the object instance
            lib = Upper();
        });

        it('should listen to a document', function () {
            lib.listen(window.document.getElementById('fileUpload'));
            lib.should.be.an('object');
        });

        it('should throw an error if a valid element is not passed as an argument', function () {

            (function ()  {
                lib.listen(window.document.getElementById('fileUploader'));
            }).should.throw(Error);
        });

        it('should pass meta data on listen', function () {
            uploader = lib.listen(window.document.getElementById('fileUpload'), {
                meta: {
                    name: 'myCoolFile',
                    type: 'user'
                }
            });

            uploader.meta.should.deep.equal({
                name: 'myCoolFile',
                type: 'user'
            });
        });
    });

    describe('start()', function () {

        it('should throw an error listen has not passed { defer: true }', function () {

            uploader = lib.listen(window.document.getElementById('fileUpload'));

            (function () {
                uploader.start();
            }).should.throw(Error);
        });

        it('should begin the upload if { defer: true }', function () {

            uploader = lib.listen(window.document.getElementById('fileUpload'), {
                defer: true
            });

            uploader.start().should.be.a('boolean');
        });
    });
});
